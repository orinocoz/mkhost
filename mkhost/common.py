import datetime
import logging
import re

import mkhost.dns_log

##############################################################################
# Common settings
##############################################################################

_version_major   = 0
_version_minor   = 4
_dry_run         = True
_verbose         = False
_non_interactive = False
_run_ts          = datetime.datetime.now(datetime.timezone.utc)     # timestamp of this run

# Returns the version number as a pair (major, minor)
def get_version():
    return (_version_major, _version_minor)

def get_dry_run():
    return _dry_run

def set_dry_run(b):
    global _dry_run
    _dry_run = bool(b)
    logging.debug("_dry_run: {}".format(_dry_run))

def get_non_interactive():
    return _non_interactive

def set_non_interactive(b):
    global _non_interactive
    _non_interactive = bool(b)
    logging.debug("_non_interactive: {}".format(_non_interactive))

def get_verbose():
    return _verbose

def set_verbose(b):
    global _verbose
    _verbose = bool(b)
    logging.debug("_verbose: {}".format(_verbose))

# Returns the timestamp of this run as a timezone-aware, UTC datetime object.
def get_run_ts():
    return _run_ts

##############################################################################
# Common constants
##############################################################################

re_blank = re.compile(
    '^\s*$', re.ASCII)
re_comment = re.compile(
    '^\s*#.*$', re.ASCII)
re_mkhost_header = re.compile(
    '^# Generated by mkhost ([0-9]+)\.([0-9]+) at [0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{6}\+[0-9]{2}:[0-9]{2}$', re.ASCII)

##############################################################################
# Common variables
##############################################################################

_dns_log         = mkhost.dns_log.DNSLog()

##############################################################################
# Common functions
##############################################################################

def add_dns_record(record):
    _dns_log.add_record(record)

# Generates mkhost header string.
def mkhost_header():
    return "# Generated by mkhost {}.{} at {}".format(
        _version_major,
        _version_minor,
        get_run_ts().isoformat())

# Promote x to list.
def tolist(x):
    return (x if isinstance(x,list) else [x])

# Given an e-mail address, returns a pair: (username, domain).
def parse_addr(addr):
    p = addr.partition('@')
    return (p[0],p[2])

# Given an e-mail address (or a collection thereof), returns the domain (or a set thereof).
def addr2dom(addr):
    return addr.partition('@')[2] if isinstance(addr,str) else set(map(lambda x: x.partition('@')[2], addr))

# Given a set of domains and a set of addresses, returns the subset of addresses which belong
# to any of the given domains.
def filter_addr_in_domain(domains, addresses):
    xs = set(filter(lambda x: addr2dom(x) in domains, addresses))
    logging.debug("filter_addr_in_domain: {} + {} => {}".format(domains, addresses, xs))
    return xs
